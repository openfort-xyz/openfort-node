/**
 * Openfort API
 * Complete Openfort API references and guides can be found at: https://www.openfort.io/docs
 *
 * OpenAPI spec version: 1.0.0
 * Contact: founders@openfort.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export class Interaction {
  /**
   * The address of the recipient of native tokens. Use *only* to transfer native tokens. If you provide one of a `pla_...`,  or `acc_...` it will be converted to the corresponding address.
   */
  to?: string
  /**
   * The value intended to be sent with the transaction. Should be a stringified number in WEI (i.e. factor 10^18). * @example \"1000000000000000000\"
   */
  value?: string
  /**
   * The contract ID you want to interact with. Must have been added to Openfort first, starts with `con_`.
   */
  contract?: string
  /**
   * The function name of the contract. Accepts a a function signature as well (e.g. mint(address)).
   */
  functionName?: string
  /**
   * The function arguments of the contract, in string format. If you provide one of a `pla_...`, `con_...` or `acc_...` it will be converted to the corresponding address.
   */
  functionArgs?: any[]
  /**
   * Data to append to the end of the calldata. Useful for [adding a \"domain\" tag](https://opensea.notion.site/opensea/Seaport-Order-Attributions-ec2d69bf455041a5baa490941aad307f)
   */
  dataSuffix?: string
  /**
   * The encoded calldata of the contract.
   */
  data?: string

  static readonly discriminator: string | undefined = undefined

  static readonly attributeTypeMap: Array<{
    name: string
    baseName: string
    type: string
    format: string
  }> = [
    {
      name: 'to',
      baseName: 'to',
      type: 'string',
      format: '',
    },
    {
      name: 'value',
      baseName: 'value',
      type: 'string',
      format: '',
    },
    {
      name: 'contract',
      baseName: 'contract',
      type: 'string',
      format: '',
    },
    {
      name: 'functionName',
      baseName: 'functionName',
      type: 'string',
      format: '',
    },
    {
      name: 'functionArgs',
      baseName: 'functionArgs',
      type: 'Array<any>',
      format: '',
    },
    {
      name: 'dataSuffix',
      baseName: 'dataSuffix',
      type: 'string',
      format: '',
    },
    {
      name: 'data',
      baseName: 'data',
      type: 'string',
      format: '',
    },
  ]

  static getAttributeTypeMap() {
    return Interaction.attributeTypeMap
  }
}
